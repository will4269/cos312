failed to commit last class notes

there was an inclass example to but it was not passed along due to git commit closing when battery died

Hashing: is an algorithim that maps large data sets of variable length, called keys, to smaller sets of data with a fixed length

A hash table: is a data structure use a hash function to efficently map keys to values for efficent search and retrieval

h(k) hash function, input key (k)
h(k)=hash code (c) 

compression map takes hash code (c) and maps it to a value

all requirements
-good hash function
-table so that # of table entries > # of buckets *collisions

-used in many software applications: associative arrays, database indexing, and sets

Good Hash Function h(k);
-Fast O(1)
-scatters keys evenly through the table
>>keys -> h(k)=c -> table uses c to store location
-less collisions
-needs less slots | memeory

Bad Hash Function Example:
h() = 4th digit * 10 + 8th digit | from the left

h(67 754 378) = 58
h(63 497 820) = 90

This is bad as if the first 3 digits fluctuate the data can be collisided

-------------------------------------------------------------------------

Uniform Hash Function:

h(k)=[k*m/x]

k= key
m= size of hash table
x= size of set the keys are distributed in [0,x), 0<=k<x

------------------------------------------------------------------------
load factor a

a=n/m

n=#of keys stored in the table
m=#of slots in the table
-----------------------------------------------------------------------
Division Method (Modulo)

Must say mod

maps a resultant number from 0 to m when h(k)=k mod m

-----------------------------------------------------------------------
EX
10,21,30,45,49
m=10
h(k) = k mod m
h(10)=0 *fit
h(21)=1 *fit
h(30)=0 *collisions*
h(45)=5 *fit
h(49)=9 *fit

--------------------------------------------------------------------
how to pick size of table m

if it is m=2^n last n bits of key are used

if it is m=10^n digits of key are used

both not good, use a prime number near a power of 2 as it helps avoid digit overlap

10,5,7,11,12
m=5

h(10)=0
h(5)=0
h(7)=2
h(11)=1
h(12)=2

end lecture 7

\////////////////////////

lecture 8

Recap: common problem is collison h(ki)=h(kj)=c

[]

linear probing

h(k,i)=h(k)+i=k mod m + i
i=0
if h(k,i) results in collision, i=i+1
until table has been looped around

EX

18,14,21,1,35
m=7
h(k,i)=h(k)+i=k mod m + i
[0,1,2,3,4,5,6,7]
[ , , , , , , , ]
\
h(18,0)= 18 mod 7 + 0 = 4 *fits*
[0,1,2,3,4,5,6,7]
[ , , , ,18 , , , ]
\
h(14,0)= 14 mod 7 + 0 = 0 *fits*
[0,1,2,3,4,5,6,7]
[14 , , , ,18 , , , ]
\
h(21,0)= 21 mod 7 + 0 = 0 *collides* | with 14
h(21,1)= 21 mod 7 + 1 = 1 *fits*
[0,1,2,3,4,5,6,7]
[14,21, , ,18 , , , ]
/
h(1,0)= 1 mod 7 + 0 = 1 *collides* | with 21
h(1,1)= 1 mod 7 + 1 = 2 *fits*
[0,1,2,3,4,5,6,7]
[14,21,2, ,18 , , , ]
\
h(35,0)= 35 mod 7 + 0 = 0 *collides* | with 14
h(35,1)= 35 mod 7 + 1 = 1 *collides* | with 21
h(35,2)= 35 mod 7 + 2 = 2 *collides* | with 2
h(35,2)= 35 mod 7 + 3 = 3 *fits*

4 probs
[0,1,2,3,4,5,6,7]
[14,21,2,35,18 , , , ]
\
done
\


--------------------------------------
quadratic probing

h(k,i)=h(k) + i^2 = k mod m + i^2


]]]
double probing

h(k,i)={h_1(k)+i*h_2(k)}mod m, as defined uniquely in problem

EX
h_1(k)=k mod 5
h_2(k)=k mod 7
